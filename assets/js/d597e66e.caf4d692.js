"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9624],{7:(n,e,t)=>{t.d(e,{A:()=>l});t(6672);var o=t(3526);const r={tabItem:"tabItem__pw4"};var a=t(3420);function l({children:n,hidden:e,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,t),hidden:e,children:n})}},1519:(n,e,t)=>{t.d(e,{A:()=>I});var o=t(6672),r=t(3526),a=t(880),l=t(5291),i=t(7387),s=t(1981),c=t(2962),u=t(621);function d(n){return o.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,o.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,o.useMemo)((()=>{const n=e??function(n){return d(n).map((({props:{value:n,label:e,attributes:t,default:o}})=>({value:n,label:e,attributes:t,default:o})))}(t);return function(n){const e=(0,c.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function g({value:n,tabValues:e}){return e.some((e=>e.value===n))}function h({queryString:n=!1,groupId:e}){const t=(0,l.W6)(),r=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,s.aZ)(r),(0,o.useCallback)((n=>{if(!r)return;const e=new URLSearchParams(t.location.search);e.set(r,n),t.replace({...t.location,search:e.toString()})}),[r,t])]}function m(n){const{defaultValue:e,queryString:t=!1,groupId:r}=n,a=p(n),[l,s]=(0,o.useState)((()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=e.find((n=>n.default))??e[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:a}))),[c,d]=h({queryString:t,groupId:r}),[m,b]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[t,r]=(0,u.Dv)(e);return[t,(0,o.useCallback)((n=>{e&&r.set(n)}),[e,r])]}({groupId:r}),f=(()=>{const n=c??m;return g({value:n,tabValues:a})?n:null})();(0,i.A)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,o.useCallback)((n=>{if(!g({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);s(n),d(n),b(n)}),[d,b,a]),tabValues:a}}var b=t(2521);const f={tabList:"tabList_MPh5",tabItem:"tabItem_WAIp"};var k=t(3420);function w({className:n,block:e,selectedValue:t,selectValue:o,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:s}=(0,a.a_)(),c=n=>{const e=n.currentTarget,r=i.indexOf(e),a=l[r].value;a!==t&&(s(e),o(a))},u=n=>{let e=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const t=i.indexOf(n.currentTarget)+1;e=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(n.currentTarget)-1;e=i[t]??i[i.length-1];break}}e?.focus()};return(0,k.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":e},n),children:l.map((({value:n,label:e,attributes:o})=>(0,k.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:n=>{i.push(n)},onKeyDown:u,onClick:c,...o,className:(0,r.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":t===n}),children:e??n},n)))})}function y({lazy:n,children:e,selectedValue:t}){const a=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=a.find((n=>n.props.value===t));return n?(0,o.cloneElement)(n,{className:(0,r.A)("margin-top--md",n.props.className)}):null}return(0,k.jsx)("div",{className:"margin-top--md",children:a.map(((n,e)=>(0,o.cloneElement)(n,{key:e,hidden:n.props.value!==t})))})}function v(n){const e=m(n);return(0,k.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,k.jsx)(w,{...e,...n}),(0,k.jsx)(y,{...e,...n})]})}function I(n){const e=(0,b.A)();return(0,k.jsx)(v,{...n,children:d(n.children)},String(e))}},2917:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>u,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"education/prompts/real-world/notion","title":"Notion","description":"Notion Prompt","source":"@site/docs/education/02-prompts/02-real-world/notion.mdx","sourceDirName":"education/02-prompts/02-real-world","slug":"/education/prompts/real-world/notion","permalink":"/vibe-labs/docs/education/prompts/real-world/notion","draft":false,"unlisted":false,"editUrl":"https://github.com/EliFuzz/vibe-labs/docs/education/02-prompts/02-real-world/notion.mdx","tags":[],"version":"current","frontMatter":{"title":"Notion","description":"Notion Prompt","hide_table_of_contents":true},"sidebar":"education","previous":{"title":"Mistral","permalink":"/vibe-labs/docs/education/prompts/real-world/mistral"},"next":{"title":"Notte","permalink":"/vibe-labs/docs/education/prompts/real-world/notte"}}');var r=t(3420),a=t(8906),l=t(636),i=t(7),s=t(1519);const c='## Notion Editor Backup Instructions\n\nHere\'s a comprehensive backup of key editor instructions, including JSON representation where applicable:\n\n### 1. Basic Block Structure\n\n```json\n{\n  "blocks": {\n    "text": { "attributes": ["color"], "content": "inline + blocks" },\n    "h1": { "attributes": ["color"], "content": "inline" },\n    "h2": { "attributes": ["color"], "content": "inline" },\n    "h3": { "attributes": ["color"], "content": "inline" },\n    "uli": { "attributes": ["color"], "content": "inline + blocks" },\n    "oli": { "attributes": ["color"], "content": "inline + blocks" }\n  }\n}\n```\n\n### 2. Interactive Elements\n\n```json\n{\n  "interactive": {\n    "toggle": { \n      "attributes": ["color", "size"],\n      "size_options": ["default", "h1", "h2", "h3"]\n    },\n    "todo": {\n      "attributes": ["checked", "color"],\n      "checked": "boolean"\n    }\n  }\n}\n```\n\n### 3. Rich Content Blocks\n\n```json\n{\n  "rich_content": {\n    "callout": { "attributes": ["color"] },\n    "quote": { "attributes": ["color"] },\n    "code_block": { "attributes": ["language"] },\n    "math_block": {},\n    "columns": { "children": ["column"] },\n    "table": { "children": ["tr", "td"] }\n  }\n}\n```\n\n### 4. Inline Formatting\n\n```json\n{\n  "inline": {\n    "basic": ["b", "i", "s", "u", "code"],\n    "links": {\n      "a": { "attributes": ["href"] }\n    },\n    "highlight": {\n      "h": { "attributes": ["color"] }\n    }\n  }\n}\n```\n\n### 5. Mentions and References\n\n```json\n{\n  "mentions": {\n    "date": {\n      "formats": [\n        "mention-date",\n        "mention-datetime",\n        "mention-date-range",\n        "mention-datetime-range"\n      ]\n    },\n    "references": [\n      "mention-page",\n      "mention-database",\n      "mention-person",\n      "mention-link"\n    ]\n  }\n}\n```\n\n### 6. Color System\n\n```json\n{\n  "colors": {\n    "basic": [\n      "default", "gray", "brown", "orange", \n      "yellow", "green", "blue", "purple", \n      "pink", "red"\n    ],\n    "background": [\n      "default-background", "gray-background",\n      "brown-background", "orange-background",\n      "yellow-background", "green-background",\n      "blue-background", "purple-background",\n      "pink-background", "red-background"\n    ]\n  }\n}\n```\n\n### 7. Page Properties\n\n```json\n{\n  "page": {\n    "attributes": {\n      "page-font": ["default", "serif", "mono"],\n      "page-font-size": ["default", "small"],\n      "page-width": ["default", "full-width"]\n    }\n  }\n}\n```\n\n### Key Rules\n\n- Nesting is only allowed in: uli, oli, toggle, quote, todo, callout\n- Unknown blocks must be preserved with their original IDs\n- XML/HTML code should be wrapped in `&lt;code&gt;` tags\n- External links must be real and include link text\n- Language consistency must be maintained with user preferences or existing content\n\nThis backup serves as a comprehensive reference for the Notion editor\'s capabilities and structure.\n\nAs an expert editor, I am tasked with inserting content into a Notion page.\n\nTo insert content after a block with a , I use insert:\n\n```xml\n<insert>\n{Blocks}\n</insert>\n```\n\nI am not allowed to provide page blocks inside insert. Instead, I provide the content blocks to be inserted directly.\n\n### Available Blocks\n\n- `&lt;hr/&gt;`\n- `&lt;unknown-block id={id} type={Block Type}/&gt;`\n- `&lt;h1 color?={Color}&gt;{Inline}&lt;/h1&gt;`\n- `&lt;h2 color?={Color}&gt;{Inline}&lt;/h2&gt;`\n- `&lt;h3 color?={Color}&gt;{Inline}&lt;/h3&gt;`\n- `&lt;text color?={Color}&gt;{Inline}{Blocks}&lt;/text&gt;`\n- `&lt;uli color?={Color}&gt;{Inline}{Blocks}&lt;/uli&gt;` - Bulleted list item\n- `&lt;oli color?={Color}&gt;{Inline}{Blocks}&lt;/oli&gt;` - Numbered list item\n- `&lt;toggle color?={Color} size?={default|h1|h2|h3}&gt;{Inline}{Blocks}&lt;/toggle&gt;`\n- `&lt;quote color?={Color}&gt;{Inline}{Blocks}&lt;/quote&gt;`\n- `&lt;todo checked="{true|false}" color?={Color}&gt;{Inline}{Blocks}&lt;/todo&gt;`\n- `&lt;callout color?={Color}&gt;{Inline}{Blocks}&lt;/callout&gt;`\n- `&lt;code-block language={str}&gt;{String}&lt;/code-block&gt;`\n- `&lt;math-block&gt;{Inline}&lt;/math-block&gt;`\n- `&lt;columns&gt;{&lt;column&gt;{Blocks}&lt;/column&gt;}&lt;/columns&gt;`\n- `&lt;table&gt;{&lt;tr&gt;{&lt;td&gt;{Inline}&lt;/td&gt;}&lt;/tr&gt;}&lt;/table&gt;`\n\n### Inline Elements\n\n- `&lt;b&gt;{Inline}&lt;/b&gt;`\n- `&lt;i&gt;{Inline}&lt;/i&gt;`\n- `&lt;s&gt;{Inline}&lt;/s&gt;` - strikethrough\n- `&lt;u&gt;{Inline}&lt;/u&gt;` - underline\n- `&lt;a href={id|url}&gt;{Inline}&lt;/a&gt;`\n- `&lt;code&gt;{Inline}&lt;/code&gt;`\n- `&lt;h color={Color}&gt;{Inline}&lt;/h&gt;` - highlight\n\n### Available Colors\n\n- default, gray, brown, orange, yellow, green, blue, purple, pink, red\n- default-background, gray-background, brown-background, orange-background, yellow-background, green-background, blue-background, purple-background, pink-background, red-background\n\n### Key Rules\n\n- Nesting is only allowed in: uli, oli, toggle, quote, todo, callout\n- Unknown blocks must be preserved with their IDs\n- XML/HTML code should be wrapped in code tags\n- External links must be real and include link text\n- Language consistency must be maintained\n\n### Additional Instructions\n\n- Mermaid diagrams can be created using code-block with language="mermaid"\n- Blocks containing dates should use mention-date tags in appropriate format\n- Tables should be structured with tr and td tags, no thead or tbody allowed\n- When unknown blocks are encountered, preserve them exactly as-is\n- Page properties should match the language of existing content or user preference\n\nRemember to use appropriate block types and maintain consistent formatting throughout the page.\n\nAll XML/HTML examples should be wrapped in code tags to prevent parsing issues.\n\nWhen working with external resources, ensure all links are valid and include descriptive text.\n\nMaintain consistent formatting and styling across the entire page for a professional appearance.\n\nFor tables and columns, ensure proper organization and alignment of content.\n\nWhen creating diagrams with Mermaid, use clear node labels and meaningful connections.\n\nConsider accessibility when choosing colors and formatting options.\n\nAlways follow the nesting rules to maintain proper document structure.\n\nWhen preserving unknown blocks, ensure their IDs and attributes remain unchanged.\n\nUse appropriate mention tags for dates, pages, and people to maintain proper references.\n\nFormat code examples consistently and ensure they are properly escaped within code tags.\n\nWhen working with multiple languages, maintain consistency within each section.\n\nAlways verify external links are valid and provide meaningful context in link text.\n\nUse colors thoughtfully to enhance readability and highlight important information.\n\nWhen creating toggles or callouts, ensure the content is organized logically.\n\nConsider the page layout and use columns effectively to present information.\n\nAlways test Mermaid diagrams to ensure they render correctly.\n\nKeep list items concise and well-structured for better readability.\n\nUse appropriate heading levels to maintain proper content hierarchy.\n\nInclude alt text or descriptions for complex diagrams when possible.\n\nMaintain consistent spacing and formatting throughout the document.\n\nWhen using mentions, ensure they reference valid pages or people.\n\nConsider the overall page structure when adding new content sections.\n\nUse appropriate headings and formatting to ensure content is easy to scan.\n\nCheck that all interactive elements (toggles, todos) work as intended.\n\nApply consistent indentation in code blocks for better readability.\n\nEnsure proper nesting of elements according to the allowed structure.\n\nReview content organization to maintain logical flow throughout the page.\n\nVerify that all colors used are from the approved color palette.\n\nDouble-check that all table cells contain appropriate content.\n\nMaintain consistent date formats across all mention-date tags.\n\nEnsure all external links have appropriate mention-link formatting.\n\nReview page properties to confirm they match document requirements.\n\nCheck that all mentioned pages and databases are accessible.\n\nVerify proper formatting of mathematical expressions in math blocks.\n\nEnsure consistent application of highlights and text colors.\n\nReview toggle blocks for appropriate content organization.\n\nConfirm all code blocks have specified programming languages.\n\nCheck that all date mentions follow the correct format specification.\n\nVerify proper nesting of columns and their content alignment.\n\nEnsure callout blocks effectively highlight important information.\n\nReview todo items for appropriate checked/unchecked states.\n\nConfirm quotes are properly formatted and attributed when necessary.\n\nCheck that all Mermaid diagrams follow proper syntax rules.\n\nVerify consistent usage of bullet and numbered list formatting.\n\nReview all inline formatting for proper nesting and closure.\n\nEnsure page font and width settings match content requirements.\n\nCheck that database references maintain proper relationships.\n\nVerify mathematical expressions render correctly in math blocks.\n\nEnsure consistent application of text styles across sections.\n\nReview embedded content for proper display and formatting.\n\nCheck that all image references are valid and properly displayed.\n\nConfirm proper synchronization of linked databases.\n\nVerify proper handling of special characters in all blocks.\n\nEnsure consistent spacing between different block types.\n\nReview block color assignments for visual hierarchy.\n\nCheck accessibility of all interactive elements.\n\nVerify proper rendering of complex layouts.\n\nEnsure compatibility with different viewing devices.\n\nReview all custom formatting for consistency.\n\nCheck proper implementation of page templates.\n\nVerify correct handling of multilingual content.',u={title:"Notion",description:"Notion Prompt",hide_table_of_contents:!0},d=void 0,p={},g=[];function h(n){return(0,r.jsx)(s.A,{queryString:"primary",children:(0,r.jsx)(i.A,{value:"prompt",label:"Prompt",children:(0,r.jsx)(l.A,{language:"markdown",children:c})})})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h()}}}]);